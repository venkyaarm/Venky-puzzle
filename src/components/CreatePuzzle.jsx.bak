// src/components/CreatePuzzle.jsx
import React, { useState } from 'react';
import PuzzleBoard from './PuzzleBoard';
import './CreatePuzzle.css';

const CreatePuzzle = () => {
  const [image, setImage] = useState(null);
  const [gridSize, setGridSize] = useState(3);
  const [imageData, setImageData] = useState('');

  const handleUpload = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onloadend = () => {
      setImage(reader.result);
      setImageData(reader.result);
    };
    if (file) reader.readAsDataURL(file);
  };

  const handleExport = () => {
  const totalTiles = gridSize * gridSize;
  const shuffledIndices = Array.from({ length: totalTiles }, (_, i) => i).sort(() => Math.random() - 0.5);

  const html = `<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Exported Puzzle</title>
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body { font-family: sans-serif; text-align: center; background: linear-gradient(to right, #ffecd2, #fcb69f); padding: 20px; }
    h2 { font-size: 32px; color: #2c3e50; margin-bottom: 20px; }
    .puzzle-container {
      display: grid;
      grid-template-columns: repeat(${gridSize}, 1fr);
      grid-template-rows: repeat(${gridSize}, 1fr);
      gap: 2px;
      width: 90vmin;
      height: 90vmin;
      max-width: 500px;
      max-height: 500px;
      margin: auto;
      border: 3px solid #333;
      position: relative;
    }
    .puzzle-piece {
      background-image: url(${imageData});
      background-size: ${gridSize * 100}% ${gridSize * 100}%;
      background-repeat: no-repeat;
      width: 100%;
      height: 100%;
      aspect-ratio: 1 / 1;
      border: 1px solid white;
      touch-action: none;
      user-select: none;
    }
    #congrats {
      font-size: 24px;
      color: green;
      font-weight: bold;
      margin-top: 20px;
      display: none;
      animation: fadeIn 1s ease forwards;
    }
    @keyframes fadeIn { from {opacity: 0;} to {opacity: 1;} }
  </style>
</head><body>

<h2>ðŸ§© Your Puzzle</h2>
<div class="puzzle-container" id="puzzle">
  ${shuffledIndices.map((tileIndex) => {
    const row = Math.floor(tileIndex / gridSize);
    const col = tileIndex % gridSize;
    return `<div class="puzzle-piece" draggable="true" data-index="${tileIndex}"
      style="background-position: ${(col * 100) / (gridSize - 1)}% ${(row * 100) / (gridSize - 1)}%;"></div>`;
  }).join('')}
</div>
<div id="congrats">ðŸŽ‰ Congratulations! You solved the puzzle! ðŸŽ‰</div>

<script>
  const container = document.getElementById('puzzle');
  let draggedEl = null;
  let dragIndex = null;

  container.addEventListener('dragstart', e => {
    if (e.target.classList.contains('puzzle-piece')) {
      draggedEl = e.target;
      dragIndex = Array.from(container.children).indexOf(draggedEl);
    }
  });

  container.addEventListener('dragover', e => e.preventDefault());

  container.addEventListener('drop', e => {
    e.preventDefault();
    if (!draggedEl || !e.target.classList.contains('puzzle-piece')) return;

    const dropIndex = Array.from(container.children).indexOf(e.target);

    if (dragIndex === dropIndex) return;

    const children = Array.from(container.children);
    container.innerHTML = '';
    const temp = children[dragIndex];
    children[dragIndex] = children[dropIndex];
    children[dropIndex] = temp;
    children.forEach(child => container.appendChild(child));

    checkWin();
  });

  // Touch support
  let touchDragEl = null;
  container.addEventListener('touchstart', e => {
    const touch = e.touches[0];
    const el = document.elementFromPoint(touch.clientX, touch.clientY);
    if (el && el.classList.contains('puzzle-piece')) {
      touchDragEl = el;
    }
  });

  container.addEventListener('touchend', e => {
    const touch = e.changedTouches[0];
    const el = document.elementFromPoint(touch.clientX, touch.clientY);
    if (el && el.classList.contains('puzzle-piece') && el !== touchDragEl) {
      const all = Array.from(container.children);
      const from = all.indexOf(touchDragEl);
      const to = all.indexOf(el);
      if (from !== -1 && to !== -1) {
        const temp = all[from];
        all[from] = all[to];
        all[to] = temp;
        container.innerHTML = '';
        all.forEach(p => container.appendChild(p));
        checkWin();
      }
    }
    touchDragEl = null;
  });

  function checkWin() {
    const pieces = Array.from(container.children);
    const isSolved = pieces.every((el, i) => Number(el.dataset.index) === i);
    if (isSolved) {
      document.getElementById('congrats').style.display = 'block';
    }
  }
</script>
</body></html>`;

  const blob = new Blob([html], { type: 'text/html' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'my-puzzle.html';
  a.click();
  URL.revokeObjectURL(url);
};



  return (
    <div className="create-container">
      <div className="create-box">
        <h2 className="create-title">ðŸŽ¨ Create Your Puzzle</h2>

        <input type="file" accept="image/*" onChange={handleUpload} className="upload-input" />

        <div className="dropdown">
          <label>Grid Size:</label>
          <select value={gridSize} onChange={(e) => setGridSize(Number(e.target.value))}>
            {[2, 3, 4, 5].map(size => (
              <option key={size} value={size}>{size}x{size}</option>
            ))}
          </select>
        </div>

        {image && (
          <>
            <div className="preview">
              <PuzzleBoard image={image} gridSize={gridSize} />
            </div>
            <button className="export-btn" onClick={handleExport}>Ã°Å¸â€œÂ¤ Export Puzzle </button>
          </>
        )}
      </div>
    </div>
  );
};

export default CreatePuzzle;
